/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDeliveryAreaArgs } from "./CreateDeliveryAreaArgs";
import { UpdateDeliveryAreaArgs } from "./UpdateDeliveryAreaArgs";
import { DeleteDeliveryAreaArgs } from "./DeleteDeliveryAreaArgs";
import { DeliveryAreaFindManyArgs } from "./DeliveryAreaFindManyArgs";
import { DeliveryAreaFindUniqueArgs } from "./DeliveryAreaFindUniqueArgs";
import { DeliveryArea } from "./DeliveryArea";
import { DeliverySlotFindManyArgs } from "../../deliverySlot/base/DeliverySlotFindManyArgs";
import { DeliverySlot } from "../../deliverySlot/base/DeliverySlot";
import { DeliveryAreaGroup } from "../../deliveryAreaGroup/base/DeliveryAreaGroup";
import { ServicePoint } from "../../servicePoint/base/ServicePoint";
import { DeliveryAreaService } from "../deliveryArea.service";

@graphql.Resolver(() => DeliveryArea)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DeliveryAreaResolverBase {
  constructor(
    protected readonly service: DeliveryAreaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "read",
    possession: "any",
  })
  async _deliveryAreasMeta(
    @graphql.Args() args: DeliveryAreaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeliveryArea])
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "read",
    possession: "any",
  })
  async deliveryAreas(
    @graphql.Args() args: DeliveryAreaFindManyArgs
  ): Promise<DeliveryArea[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeliveryArea, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "read",
    possession: "own",
  })
  async deliveryArea(
    @graphql.Args() args: DeliveryAreaFindUniqueArgs
  ): Promise<DeliveryArea | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryArea)
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "create",
    possession: "any",
  })
  async createDeliveryArea(
    @graphql.Args() args: CreateDeliveryAreaArgs
  ): Promise<DeliveryArea> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        deliveryAreaGroup: args.data.deliveryAreaGroup
          ? {
              connect: args.data.deliveryAreaGroup,
            }
          : undefined,

        servicePoint: args.data.servicePoint
          ? {
              connect: args.data.servicePoint,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryArea)
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "update",
    possession: "any",
  })
  async updateDeliveryArea(
    @graphql.Args() args: UpdateDeliveryAreaArgs
  ): Promise<DeliveryArea | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          deliveryAreaGroup: args.data.deliveryAreaGroup
            ? {
                connect: args.data.deliveryAreaGroup,
              }
            : undefined,

          servicePoint: args.data.servicePoint
            ? {
                connect: args.data.servicePoint,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryArea)
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "delete",
    possession: "any",
  })
  async deleteDeliveryArea(
    @graphql.Args() args: DeleteDeliveryAreaArgs
  ): Promise<DeliveryArea | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DeliverySlot])
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "read",
    possession: "any",
  })
  async deliverySlots(
    @graphql.Parent() parent: DeliveryArea,
    @graphql.Args() args: DeliverySlotFindManyArgs
  ): Promise<DeliverySlot[]> {
    const results = await this.service.findDeliverySlots(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DeliveryAreaGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeliveryAreaGroup",
    action: "read",
    possession: "any",
  })
  async deliveryAreaGroup(
    @graphql.Parent() parent: DeliveryArea
  ): Promise<DeliveryAreaGroup | null> {
    const result = await this.service.getDeliveryAreaGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ServicePoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "read",
    possession: "any",
  })
  async servicePoint(
    @graphql.Parent() parent: DeliveryArea
  ): Promise<ServicePoint | null> {
    const result = await this.service.getServicePoint(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
