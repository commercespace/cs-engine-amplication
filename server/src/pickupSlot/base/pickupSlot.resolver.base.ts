/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePickupSlotArgs } from "./CreatePickupSlotArgs";
import { UpdatePickupSlotArgs } from "./UpdatePickupSlotArgs";
import { DeletePickupSlotArgs } from "./DeletePickupSlotArgs";
import { PickupSlotFindManyArgs } from "./PickupSlotFindManyArgs";
import { PickupSlotFindUniqueArgs } from "./PickupSlotFindUniqueArgs";
import { PickupSlot } from "./PickupSlot";
import { PickupLocation } from "../../pickupLocation/base/PickupLocation";
import { ServicePoint } from "../../servicePoint/base/ServicePoint";
import { PickupSlotService } from "../pickupSlot.service";

@graphql.Resolver(() => PickupSlot)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PickupSlotResolverBase {
  constructor(
    protected readonly service: PickupSlotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PickupSlot",
    action: "read",
    possession: "any",
  })
  async _pickupSlotsMeta(
    @graphql.Args() args: PickupSlotFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PickupSlot])
  @nestAccessControl.UseRoles({
    resource: "PickupSlot",
    action: "read",
    possession: "any",
  })
  async pickupSlots(
    @graphql.Args() args: PickupSlotFindManyArgs
  ): Promise<PickupSlot[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PickupSlot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PickupSlot",
    action: "read",
    possession: "own",
  })
  async pickupSlot(
    @graphql.Args() args: PickupSlotFindUniqueArgs
  ): Promise<PickupSlot | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PickupSlot)
  @nestAccessControl.UseRoles({
    resource: "PickupSlot",
    action: "create",
    possession: "any",
  })
  async createPickupSlot(
    @graphql.Args() args: CreatePickupSlotArgs
  ): Promise<PickupSlot> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        pickupLocation: args.data.pickupLocation
          ? {
              connect: args.data.pickupLocation,
            }
          : undefined,

        servicePoint: {
          connect: args.data.servicePoint,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PickupSlot)
  @nestAccessControl.UseRoles({
    resource: "PickupSlot",
    action: "update",
    possession: "any",
  })
  async updatePickupSlot(
    @graphql.Args() args: UpdatePickupSlotArgs
  ): Promise<PickupSlot | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          pickupLocation: args.data.pickupLocation
            ? {
                connect: args.data.pickupLocation,
              }
            : undefined,

          servicePoint: {
            connect: args.data.servicePoint,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PickupSlot)
  @nestAccessControl.UseRoles({
    resource: "PickupSlot",
    action: "delete",
    possession: "any",
  })
  async deletePickupSlot(
    @graphql.Args() args: DeletePickupSlotArgs
  ): Promise<PickupSlot | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PickupLocation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PickupLocation",
    action: "read",
    possession: "any",
  })
  async pickupLocation(
    @graphql.Parent() parent: PickupSlot
  ): Promise<PickupLocation | null> {
    const result = await this.service.getPickupLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ServicePoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "read",
    possession: "any",
  })
  async servicePoint(
    @graphql.Parent() parent: PickupSlot
  ): Promise<ServicePoint | null> {
    const result = await this.service.getServicePoint(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
