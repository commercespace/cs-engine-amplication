/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServicePointService } from "../servicePoint.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ServicePointCreateInput } from "./ServicePointCreateInput";
import { ServicePointWhereInput } from "./ServicePointWhereInput";
import { ServicePointWhereUniqueInput } from "./ServicePointWhereUniqueInput";
import { ServicePointFindManyArgs } from "./ServicePointFindManyArgs";
import { ServicePointUpdateInput } from "./ServicePointUpdateInput";
import { ServicePoint } from "./ServicePoint";
import { DeliveryAreaGroupFindManyArgs } from "../../deliveryAreaGroup/base/DeliveryAreaGroupFindManyArgs";
import { DeliveryAreaGroup } from "../../deliveryAreaGroup/base/DeliveryAreaGroup";
import { DeliveryAreaGroupWhereUniqueInput } from "../../deliveryAreaGroup/base/DeliveryAreaGroupWhereUniqueInput";
import { DeliveryAreaFindManyArgs } from "../../deliveryArea/base/DeliveryAreaFindManyArgs";
import { DeliveryArea } from "../../deliveryArea/base/DeliveryArea";
import { DeliveryAreaWhereUniqueInput } from "../../deliveryArea/base/DeliveryAreaWhereUniqueInput";
import { DeliverySlotFindManyArgs } from "../../deliverySlot/base/DeliverySlotFindManyArgs";
import { DeliverySlot } from "../../deliverySlot/base/DeliverySlot";
import { DeliverySlotWhereUniqueInput } from "../../deliverySlot/base/DeliverySlotWhereUniqueInput";
import { PickupLocationFindManyArgs } from "../../pickupLocation/base/PickupLocationFindManyArgs";
import { PickupLocation } from "../../pickupLocation/base/PickupLocation";
import { PickupLocationWhereUniqueInput } from "../../pickupLocation/base/PickupLocationWhereUniqueInput";
import { PickupSlotFindManyArgs } from "../../pickupSlot/base/PickupSlotFindManyArgs";
import { PickupSlot } from "../../pickupSlot/base/PickupSlot";
import { PickupSlotWhereUniqueInput } from "../../pickupSlot/base/PickupSlotWhereUniqueInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ServicePointControllerBase {
  constructor(
    protected readonly service: ServicePointService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServicePoint })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: ServicePointCreateInput
  ): Promise<ServicePoint> {
    return await this.service.create({
      data: {
        ...data,

        tenant: {
          connect: data.tenant,
        },
      },
      select: {
        address: true,
        createdAt: true,
        description: true,
        email: true,
        ghanaPostGps: true,
        id: true,
        isActive: true,
        name: true,
        phone: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [ServicePoint] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(ServicePointFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<ServicePoint[]> {
    const args = plainToClass(ServicePointFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        address: true,
        createdAt: true,
        description: true,
        email: true,
        ghanaPostGps: true,
        id: true,
        isActive: true,
        name: true,
        phone: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServicePoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: ServicePointWhereUniqueInput
  ): Promise<ServicePoint | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        address: true,
        createdAt: true,
        description: true,
        email: true,
        ghanaPostGps: true,
        id: true,
        isActive: true,
        name: true,
        phone: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServicePoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() data: ServicePointUpdateInput
  ): Promise<ServicePoint | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          tenant: {
            connect: data.tenant,
          },
        },
        select: {
          address: true,
          createdAt: true,
          description: true,
          email: true,
          ghanaPostGps: true,
          id: true,
          isActive: true,
          name: true,
          phone: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServicePoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: ServicePointWhereUniqueInput
  ): Promise<ServicePoint | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          address: true,
          createdAt: true,
          description: true,
          email: true,
          ghanaPostGps: true,
          id: true,
          isActive: true,
          name: true,
          phone: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "DeliveryAreaGroup",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/deliveryAreaGroups")
  @ApiNestedQuery(DeliveryAreaGroupFindManyArgs)
  async findManyDeliveryAreaGroups(
    @common.Req() request: Request,
    @common.Param() params: ServicePointWhereUniqueInput
  ): Promise<DeliveryAreaGroup[]> {
    const query = plainToClass(DeliveryAreaGroupFindManyArgs, request.query);
    const results = await this.service.findDeliveryAreaGroups(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,

        servicePoint: {
          select: {
            id: true,
          },
        },

        tenantId: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/deliveryAreaGroups")
  async connectDeliveryAreaGroups(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliveryAreaGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAreaGroups: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/deliveryAreaGroups")
  async updateDeliveryAreaGroups(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliveryAreaGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAreaGroups: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/deliveryAreaGroups")
  async disconnectDeliveryAreaGroups(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliveryAreaGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAreaGroups: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/deliveryAreas")
  @ApiNestedQuery(DeliveryAreaFindManyArgs)
  async findManyDeliveryAreas(
    @common.Req() request: Request,
    @common.Param() params: ServicePointWhereUniqueInput
  ): Promise<DeliveryArea[]> {
    const query = plainToClass(DeliveryAreaFindManyArgs, request.query);
    const results = await this.service.findDeliveryAreas(params.id, {
      ...query,
      select: {
        createdAt: true,

        deliveryAreaGroup: {
          select: {
            id: true,
          },
        },

        deliveryPrice: true,
        description: true,
        geoLocation: true,
        id: true,
        name: true,

        servicePoint: {
          select: {
            id: true,
          },
        },

        tenantId: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/deliveryAreas")
  async connectDeliveryAreas(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliveryAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAreas: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/deliveryAreas")
  async updateDeliveryAreas(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliveryAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAreas: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/deliveryAreas")
  async disconnectDeliveryAreas(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliveryAreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliveryAreas: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/deliverySlots")
  @ApiNestedQuery(DeliverySlotFindManyArgs)
  async findManyDeliverySlots(
    @common.Req() request: Request,
    @common.Param() params: ServicePointWhereUniqueInput
  ): Promise<DeliverySlot[]> {
    const query = plainToClass(DeliverySlotFindManyArgs, request.query);
    const results = await this.service.findDeliverySlots(params.id, {
      ...query,
      select: {
        createdAt: true,
        cutOffTime: true,
        date: true,
        day: true,

        deliveryArea: {
          select: {
            id: true,
          },
        },

        deliveryPrice: true,
        endTime: true,
        id: true,
        isActive: true,
        isBooked: true,
        orderQuota: true,
        pickingPrice: true,

        servicePoint: {
          select: {
            id: true,
          },
        },

        slotType: true,
        startTime: true,
        tenantId: true,
        updatedAt: true,
        validFrom: true,
        validTo: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/deliverySlots")
  async connectDeliverySlots(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliverySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliverySlots: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/deliverySlots")
  async updateDeliverySlots(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliverySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliverySlots: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/deliverySlots")
  async disconnectDeliverySlots(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: DeliverySlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      deliverySlots: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PickupLocation",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/pickupLocations")
  @ApiNestedQuery(PickupLocationFindManyArgs)
  async findManyPickupLocations(
    @common.Req() request: Request,
    @common.Param() params: ServicePointWhereUniqueInput
  ): Promise<PickupLocation[]> {
    const query = plainToClass(PickupLocationFindManyArgs, request.query);
    const results = await this.service.findPickupLocations(params.id, {
      ...query,
      select: {
        createdAt: true,
        deliveryPrice: true,
        description: true,
        geoLocation: true,
        id: true,
        name: true,

        servicePoint: {
          select: {
            id: true,
          },
        },

        tenantId: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/pickupLocations")
  async connectPickupLocations(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: PickupLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickupLocations: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/pickupLocations")
  async updatePickupLocations(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: PickupLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickupLocations: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/pickupLocations")
  async disconnectPickupLocations(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: PickupLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickupLocations: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "PickupSlot",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/pickupSlots")
  @ApiNestedQuery(PickupSlotFindManyArgs)
  async findManyPickupSlots(
    @common.Req() request: Request,
    @common.Param() params: ServicePointWhereUniqueInput
  ): Promise<PickupSlot[]> {
    const query = plainToClass(PickupSlotFindManyArgs, request.query);
    const results = await this.service.findPickupSlots(params.id, {
      ...query,
      select: {
        createdAt: true,
        cutOffTime: true,
        date: true,
        day: true,
        deliveryPrice: true,
        endTime: true,
        id: true,
        isActive: true,
        isBooked: true,
        orderQuota: true,
        pickingPrice: true,

        pickupLocation: {
          select: {
            id: true,
          },
        },

        servicePoint: {
          select: {
            id: true,
          },
        },

        slotType: true,
        startTime: true,
        tenantId: true,
        updatedAt: true,
        validFrom: true,
        validTo: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/pickupSlots")
  async connectPickupSlots(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: PickupSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickupSlots: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/pickupSlots")
  async updatePickupSlots(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: PickupSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickupSlots: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/pickupSlots")
  async disconnectPickupSlots(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: PickupSlotWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      pickupSlots: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/products")
  @ApiNestedQuery(ProductFindManyArgs)
  async findManyProducts(
    @common.Req() request: Request,
    @common.Param() params: ServicePointWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProducts(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,

        servicePoint: {
          select: {
            id: true,
          },
        },

        tenantId: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/products")
  async connectProducts(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/products")
  async updateProducts(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/products")
  async disconnectProducts(
    @common.Param() params: ServicePointWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
