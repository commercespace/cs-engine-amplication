/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliverySlotService } from "../deliverySlot.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeliverySlotCreateInput } from "./DeliverySlotCreateInput";
import { DeliverySlotWhereInput } from "./DeliverySlotWhereInput";
import { DeliverySlotWhereUniqueInput } from "./DeliverySlotWhereUniqueInput";
import { DeliverySlotFindManyArgs } from "./DeliverySlotFindManyArgs";
import { DeliverySlotUpdateInput } from "./DeliverySlotUpdateInput";
import { DeliverySlot } from "./DeliverySlot";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DeliverySlotControllerBase {
  constructor(
    protected readonly service: DeliverySlotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliverySlot })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(
    @common.Body() data: DeliverySlotCreateInput
  ): Promise<DeliverySlot> {
    return await this.service.create({
      data: {
        ...data,

        deliveryArea: data.deliveryArea
          ? {
              connect: data.deliveryArea,
            }
          : undefined,

        servicePoint: {
          connect: data.servicePoint,
        },
      },
      select: {
        createdAt: true,
        cutOffTime: true,
        date: true,
        day: true,

        deliveryArea: {
          select: {
            id: true,
          },
        },

        deliveryPrice: true,
        endTime: true,
        id: true,
        isActive: true,
        isBooked: true,
        orderQuota: true,
        pickingPrice: true,

        servicePoint: {
          select: {
            id: true,
          },
        },

        slotType: true,
        startTime: true,
        tenantId: true,
        updatedAt: true,
        validFrom: true,
        validTo: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliverySlot] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(DeliverySlotFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<DeliverySlot[]> {
    const args = plainToClass(DeliverySlotFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        cutOffTime: true,
        date: true,
        day: true,

        deliveryArea: {
          select: {
            id: true,
          },
        },

        deliveryPrice: true,
        endTime: true,
        id: true,
        isActive: true,
        isBooked: true,
        orderQuota: true,
        pickingPrice: true,

        servicePoint: {
          select: {
            id: true,
          },
        },

        slotType: true,
        startTime: true,
        tenantId: true,
        updatedAt: true,
        validFrom: true,
        validTo: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliverySlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: DeliverySlotWhereUniqueInput
  ): Promise<DeliverySlot | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        cutOffTime: true,
        date: true,
        day: true,

        deliveryArea: {
          select: {
            id: true,
          },
        },

        deliveryPrice: true,
        endTime: true,
        id: true,
        isActive: true,
        isBooked: true,
        orderQuota: true,
        pickingPrice: true,

        servicePoint: {
          select: {
            id: true,
          },
        },

        slotType: true,
        startTime: true,
        tenantId: true,
        updatedAt: true,
        validFrom: true,
        validTo: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliverySlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: DeliverySlotWhereUniqueInput,
    @common.Body() data: DeliverySlotUpdateInput
  ): Promise<DeliverySlot | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          deliveryArea: data.deliveryArea
            ? {
                connect: data.deliveryArea,
              }
            : undefined,

          servicePoint: {
            connect: data.servicePoint,
          },
        },
        select: {
          createdAt: true,
          cutOffTime: true,
          date: true,
          day: true,

          deliveryArea: {
            select: {
              id: true,
            },
          },

          deliveryPrice: true,
          endTime: true,
          id: true,
          isActive: true,
          isBooked: true,
          orderQuota: true,
          pickingPrice: true,

          servicePoint: {
            select: {
              id: true,
            },
          },

          slotType: true,
          startTime: true,
          tenantId: true,
          updatedAt: true,
          validFrom: true,
          validTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliverySlot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: DeliverySlotWhereUniqueInput
  ): Promise<DeliverySlot | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          cutOffTime: true,
          date: true,
          day: true,

          deliveryArea: {
            select: {
              id: true,
            },
          },

          deliveryPrice: true,
          endTime: true,
          id: true,
          isActive: true,
          isBooked: true,
          orderQuota: true,
          pickingPrice: true,

          servicePoint: {
            select: {
              id: true,
            },
          },

          slotType: true,
          startTime: true,
          tenantId: true,
          updatedAt: true,
          validFrom: true,
          validTo: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
