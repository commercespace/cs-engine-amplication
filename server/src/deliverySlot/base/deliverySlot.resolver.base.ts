/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDeliverySlotArgs } from "./CreateDeliverySlotArgs";
import { UpdateDeliverySlotArgs } from "./UpdateDeliverySlotArgs";
import { DeleteDeliverySlotArgs } from "./DeleteDeliverySlotArgs";
import { DeliverySlotFindManyArgs } from "./DeliverySlotFindManyArgs";
import { DeliverySlotFindUniqueArgs } from "./DeliverySlotFindUniqueArgs";
import { DeliverySlot } from "./DeliverySlot";
import { DeliveryArea } from "../../deliveryArea/base/DeliveryArea";
import { ServicePoint } from "../../servicePoint/base/ServicePoint";
import { DeliverySlotService } from "../deliverySlot.service";

@graphql.Resolver(() => DeliverySlot)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DeliverySlotResolverBase {
  constructor(
    protected readonly service: DeliverySlotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "read",
    possession: "any",
  })
  async _deliverySlotsMeta(
    @graphql.Args() args: DeliverySlotFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeliverySlot])
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "read",
    possession: "any",
  })
  async deliverySlots(
    @graphql.Args() args: DeliverySlotFindManyArgs
  ): Promise<DeliverySlot[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeliverySlot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "read",
    possession: "own",
  })
  async deliverySlot(
    @graphql.Args() args: DeliverySlotFindUniqueArgs
  ): Promise<DeliverySlot | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliverySlot)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "create",
    possession: "any",
  })
  async createDeliverySlot(
    @graphql.Args() args: CreateDeliverySlotArgs
  ): Promise<DeliverySlot> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        deliveryArea: args.data.deliveryArea
          ? {
              connect: args.data.deliveryArea,
            }
          : undefined,

        servicePoint: {
          connect: args.data.servicePoint,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliverySlot)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "update",
    possession: "any",
  })
  async updateDeliverySlot(
    @graphql.Args() args: UpdateDeliverySlotArgs
  ): Promise<DeliverySlot | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          deliveryArea: args.data.deliveryArea
            ? {
                connect: args.data.deliveryArea,
              }
            : undefined,

          servicePoint: {
            connect: args.data.servicePoint,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliverySlot)
  @nestAccessControl.UseRoles({
    resource: "DeliverySlot",
    action: "delete",
    possession: "any",
  })
  async deleteDeliverySlot(
    @graphql.Args() args: DeleteDeliverySlotArgs
  ): Promise<DeliverySlot | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DeliveryArea, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "read",
    possession: "any",
  })
  async deliveryArea(
    @graphql.Parent() parent: DeliverySlot
  ): Promise<DeliveryArea | null> {
    const result = await this.service.getDeliveryArea(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ServicePoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "read",
    possession: "any",
  })
  async servicePoint(
    @graphql.Parent() parent: DeliverySlot
  ): Promise<ServicePoint | null> {
    const result = await this.service.getServicePoint(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
