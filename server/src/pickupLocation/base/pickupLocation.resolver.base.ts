/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePickupLocationArgs } from "./CreatePickupLocationArgs";
import { UpdatePickupLocationArgs } from "./UpdatePickupLocationArgs";
import { DeletePickupLocationArgs } from "./DeletePickupLocationArgs";
import { PickupLocationFindManyArgs } from "./PickupLocationFindManyArgs";
import { PickupLocationFindUniqueArgs } from "./PickupLocationFindUniqueArgs";
import { PickupLocation } from "./PickupLocation";
import { PickupSlotFindManyArgs } from "../../pickupSlot/base/PickupSlotFindManyArgs";
import { PickupSlot } from "../../pickupSlot/base/PickupSlot";
import { ServicePoint } from "../../servicePoint/base/ServicePoint";
import { PickupLocationService } from "../pickupLocation.service";

@graphql.Resolver(() => PickupLocation)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PickupLocationResolverBase {
  constructor(
    protected readonly service: PickupLocationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PickupLocation",
    action: "read",
    possession: "any",
  })
  async _pickupLocationsMeta(
    @graphql.Args() args: PickupLocationFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PickupLocation])
  @nestAccessControl.UseRoles({
    resource: "PickupLocation",
    action: "read",
    possession: "any",
  })
  async pickupLocations(
    @graphql.Args() args: PickupLocationFindManyArgs
  ): Promise<PickupLocation[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PickupLocation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PickupLocation",
    action: "read",
    possession: "own",
  })
  async pickupLocation(
    @graphql.Args() args: PickupLocationFindUniqueArgs
  ): Promise<PickupLocation | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PickupLocation)
  @nestAccessControl.UseRoles({
    resource: "PickupLocation",
    action: "create",
    possession: "any",
  })
  async createPickupLocation(
    @graphql.Args() args: CreatePickupLocationArgs
  ): Promise<PickupLocation> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        servicePoint: {
          connect: args.data.servicePoint,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PickupLocation)
  @nestAccessControl.UseRoles({
    resource: "PickupLocation",
    action: "update",
    possession: "any",
  })
  async updatePickupLocation(
    @graphql.Args() args: UpdatePickupLocationArgs
  ): Promise<PickupLocation | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          servicePoint: {
            connect: args.data.servicePoint,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PickupLocation)
  @nestAccessControl.UseRoles({
    resource: "PickupLocation",
    action: "delete",
    possession: "any",
  })
  async deletePickupLocation(
    @graphql.Args() args: DeletePickupLocationArgs
  ): Promise<PickupLocation | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PickupSlot])
  @nestAccessControl.UseRoles({
    resource: "PickupSlot",
    action: "read",
    possession: "any",
  })
  async pickupSlots(
    @graphql.Parent() parent: PickupLocation,
    @graphql.Args() args: PickupSlotFindManyArgs
  ): Promise<PickupSlot[]> {
    const results = await this.service.findPickupSlots(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ServicePoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "read",
    possession: "any",
  })
  async servicePoint(
    @graphql.Parent() parent: PickupLocation
  ): Promise<ServicePoint | null> {
    const result = await this.service.getServicePoint(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
