/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDeliveryAreaGroupArgs } from "./CreateDeliveryAreaGroupArgs";
import { UpdateDeliveryAreaGroupArgs } from "./UpdateDeliveryAreaGroupArgs";
import { DeleteDeliveryAreaGroupArgs } from "./DeleteDeliveryAreaGroupArgs";
import { DeliveryAreaGroupFindManyArgs } from "./DeliveryAreaGroupFindManyArgs";
import { DeliveryAreaGroupFindUniqueArgs } from "./DeliveryAreaGroupFindUniqueArgs";
import { DeliveryAreaGroup } from "./DeliveryAreaGroup";
import { DeliveryAreaFindManyArgs } from "../../deliveryArea/base/DeliveryAreaFindManyArgs";
import { DeliveryArea } from "../../deliveryArea/base/DeliveryArea";
import { ServicePoint } from "../../servicePoint/base/ServicePoint";
import { DeliveryAreaGroupService } from "../deliveryAreaGroup.service";

@graphql.Resolver(() => DeliveryAreaGroup)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DeliveryAreaGroupResolverBase {
  constructor(
    protected readonly service: DeliveryAreaGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeliveryAreaGroup",
    action: "read",
    possession: "any",
  })
  async _deliveryAreaGroupsMeta(
    @graphql.Args() args: DeliveryAreaGroupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeliveryAreaGroup])
  @nestAccessControl.UseRoles({
    resource: "DeliveryAreaGroup",
    action: "read",
    possession: "any",
  })
  async deliveryAreaGroups(
    @graphql.Args() args: DeliveryAreaGroupFindManyArgs
  ): Promise<DeliveryAreaGroup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeliveryAreaGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeliveryAreaGroup",
    action: "read",
    possession: "own",
  })
  async deliveryAreaGroup(
    @graphql.Args() args: DeliveryAreaGroupFindUniqueArgs
  ): Promise<DeliveryAreaGroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryAreaGroup)
  @nestAccessControl.UseRoles({
    resource: "DeliveryAreaGroup",
    action: "create",
    possession: "any",
  })
  async createDeliveryAreaGroup(
    @graphql.Args() args: CreateDeliveryAreaGroupArgs
  ): Promise<DeliveryAreaGroup> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        servicePoint: args.data.servicePoint
          ? {
              connect: args.data.servicePoint,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DeliveryAreaGroup)
  @nestAccessControl.UseRoles({
    resource: "DeliveryAreaGroup",
    action: "update",
    possession: "any",
  })
  async updateDeliveryAreaGroup(
    @graphql.Args() args: UpdateDeliveryAreaGroupArgs
  ): Promise<DeliveryAreaGroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          servicePoint: args.data.servicePoint
            ? {
                connect: args.data.servicePoint,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryAreaGroup)
  @nestAccessControl.UseRoles({
    resource: "DeliveryAreaGroup",
    action: "delete",
    possession: "any",
  })
  async deleteDeliveryAreaGroup(
    @graphql.Args() args: DeleteDeliveryAreaGroupArgs
  ): Promise<DeliveryAreaGroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DeliveryArea])
  @nestAccessControl.UseRoles({
    resource: "DeliveryArea",
    action: "read",
    possession: "any",
  })
  async deliveryAreas(
    @graphql.Parent() parent: DeliveryAreaGroup,
    @graphql.Args() args: DeliveryAreaFindManyArgs
  ): Promise<DeliveryArea[]> {
    const results = await this.service.findDeliveryAreas(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ServicePoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServicePoint",
    action: "read",
    possession: "any",
  })
  async servicePoint(
    @graphql.Parent() parent: DeliveryAreaGroup
  ): Promise<ServicePoint | null> {
    const result = await this.service.getServicePoint(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
